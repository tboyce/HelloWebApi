// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using HelloWebApi.Console.Greetings;
using HelloWebApi.Console.Greetings.Models;
using Microsoft.Rest;

namespace HelloWebApi.Console.Greetings
{
    public static partial class GreetingsOperationsExtensions
    {
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='greeting'>
        /// Required.
        /// </param>
        public static Greeting Add(this IGreetingsOperations operations, Greeting greeting)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGreetingsOperations)s).AddAsync(greeting);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='greeting'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Greeting> AddAsync(this IGreetingsOperations operations, Greeting greeting, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<HelloWebApi.Console.Greetings.Models.Greeting> result = await operations.AddWithOperationResponseAsync(greeting, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static object Delete(this IGreetingsOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGreetingsOperations)s).DeleteAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteAsync(this IGreetingsOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        public static IList<Greeting> Get(this IGreetingsOperations operations)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGreetingsOperations)s).GetAsync();
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<IList<Greeting>> GetAsync(this IGreetingsOperations operations, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<System.Collections.Generic.IList<HelloWebApi.Console.Greetings.Models.Greeting>> result = await operations.GetWithOperationResponseAsync(cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        public static Greeting GetById(this IGreetingsOperations operations, int id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IGreetingsOperations)s).GetByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the HelloWebApi.Console.Greetings.IGreetingsOperations.
        /// </param>
        /// <param name='id'>
        /// Required.
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<Greeting> GetByIdAsync(this IGreetingsOperations operations, int id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<HelloWebApi.Console.Greetings.Models.Greeting> result = await operations.GetByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
